<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Suki&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://sukioosuke.github.io/"/>
  <updated>2019-07-26T11:03:41.711Z</updated>
  <id>https://sukioosuke.github.io/</id>
  
  <author>
    <name>Suki</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>样本量大小的确定</title>
    <link href="https://sukioosuke.github.io/2019/07/25/statistics-sample-size/"/>
    <id>https://sukioosuke.github.io/2019/07/25/statistics-sample-size/</id>
    <published>2019-07-25T06:33:40.000Z</published>
    <updated>2019-07-26T11:03:41.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="估计总体均值时样本量的确定"><a href="#估计总体均值时样本量的确定" class="headerlink" title="估计总体均值时样本量的确定"></a>估计总体均值时样本量的确定</h3><p>总体均值的置信区间是由样本均值$\bar x$和估计误差两部分组成的。在重复抽样或者无线总体抽样条件下，估计误差为$z_{\alpha/2}\frac\sigma{\sqrt n}$。$z_{\alpha/2}$的值和样本量n共同确定了估计误差的大小。一旦确定了置信水平，临界值$z_{\alpha/2}$就已经确定了。对于给定的临界值$z_{\alpha/2}$和总体标准差$\sigma$，就可以确定任一希望的估计误差所需要的样本量。<br>令E代表所希望达到的估计误差，即：<br>$$ E=z_{\alpha/2}\frac\sigma{\sqrt n} $$<br>由此可得出样本量n为：<br>$$ n=\frac{(z_{\alpha/2})^2\sigma^2}{E^2} $$<br>在实际应用中，如果$\sigma$的值不知道，可以用类似样本的标准差来代替；也可以用实验调查的办法，选择一个初始样本，以该样本的样本标准差作为$\sigma$的估计值。</p><h3 id="估计总体比例时样本量的确定"><a href="#估计总体比例时样本量的确定" class="headerlink" title="估计总体比例时样本量的确定"></a>估计总体比例时样本量的确定</h3><p>与上述估计总体均值时样本量的确定方法类似，在重复抽样或无限总体抽样条件下，估计总体比利置信区间的估计误差为$z_{\alpha/2}\sqrt{\frac{\pi(1-\pi)}n}$。$z_{\alpha/2}$的值、总体比例$\pi$和样本量n共同决定了误差大小。一旦确定了置信水平，临界值$z_{\alpha/2}$就已经确定了。由于总体比例的值是固定的，所以估计误差由样本量来确定，样本量越大，估计误差就越小，估计精度就越高。因此，对于给定的临界值$z_{\alpha/2}，就可以确定任一希望的估计误差所需要的样本量。<br>令E代表所希望达到的估计误差，即：<br>$$ E=z_{\alpha/2}\sqrt{\frac{\pi(1-\pi)}n} $$<br>由此可得出样本量n为：<br>$$ n=\frac{(z_{\alpha/2})^2\pi(1-\pi)}}{E^2} $$<br>在实际应用中，如果$\pi$值不知道，可以使用类似的样本比例来代替；也可以用实验调查的办法，选择一个初始样本，使用该样本的比例作为$\pi$的估计值。当$\pi$值不知道时，通常取使$\pi(1-\pi)$最大的0.5。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="不同置信区间下的临界值"><a href="#不同置信区间下的临界值" class="headerlink" title="不同置信区间下的临界值"></a>不同置信区间下的临界值</h4><table><thead><tr><th align="center">置信区间α</th><th align="center">临界值$z_{\alpha /2}$</th></tr></thead><tbody><tr><td align="center">80%</td><td align="center">1.282</td></tr><tr><td align="center">85%</td><td align="center">1.440</td></tr><tr><td align="center">90%</td><td align="center">1.645</td></tr><tr><td align="center">95%</td><td align="center">1.960</td></tr><tr><td align="center">99%</td><td align="center">2.576</td></tr><tr><td align="center">99.5%</td><td align="center">2.807</td></tr><tr><td align="center">99.9%</td><td align="center">3.291</td></tr></tbody></table><h4 id="一个总体参数的区间估计"><a href="#一个总体参数的区间估计" class="headerlink" title="一个总体参数的区间估计"></a>一个总体参数的区间估计</h4><table><thead><tr><th align="center">参数</th><th align="center">点估计量（值）</th><th align="center">标准误差</th><th align="left">$(1-\alpha)%$的置信区间</th><th align="left">假定条件</th></tr></thead><tbody><tr><td align="center">μ总体均值</td><td align="center">$\bar{x}$</td><td align="center">$\frac{\sigma}{\sqrt{n}}$</td><td align="left">$\bar{x}\pm z_{\alpha /2}\frac{\sigma}{\sqrt{n}}$</td><td align="left">(1)$\sigma$已知<br>(2)大样本（$n\ge 30$）</td></tr><tr><td align="center">μ总体均值</td><td align="center">$\bar{x}$</td><td align="center">$\frac{\sigma}{\sqrt{n}}$</td><td align="left">$\bar{x}\pm z_{\alpha /2}\frac{s}{\sqrt{n}}$</td><td align="left">(1)$\sigma$未知<br>(2)大样本（$n\ge 30$）</td></tr><tr><td align="center">μ总体均值</td><td align="center">$\bar{x}$</td><td align="center">$\frac{\sigma}{\sqrt{n}}$</td><td align="left">$\bar{x}\pm t_{\alpha /2}\frac{s}{\sqrt{n}}$</td><td align="left">(1)正态分布<br>(2)$\sigma$未知<br>(3)小样本（n&lt;30）</td></tr><tr><td align="center">π总体比例</td><td align="center">p</td><td align="center">$\sqrt{\frac{\pi(1-\pi)}{n}}$</td><td align="left">$p\pm z_{\alpha /2}\sqrt{\frac{p(1-p)}{n}}$</td><td align="left">(1)二项总体<br>(2)大样本（$np \ge 5,n(1-p) \ge 5$）</td></tr><tr><td align="center">$\sigma^2$总体方差</td><td align="center">$s^2$</td><td align="center">(不要求)</td><td align="left">$\frac{(n-1)s^2}{\mathcal{X}<em>{\alpha /2}^{2}}\le\sigma^2\le\frac{(n-1)s^2}{\mathcal{X}</em>{1-\alpha /2}^{2}}$</td><td align="left">正态总体</td></tr></tbody></table><h4 id="两个总体参数的区间估计"><a href="#两个总体参数的区间估计" class="headerlink" title="两个总体参数的区间估计"></a>两个总体参数的区间估计</h4><table><thead><tr><th align="center">参数</th><th align="center">点估计量（值）</th><th align="center">标准误差</th><th align="left">$(1-\alpha)%$的置信区间</th><th align="left">假定条件</th></tr></thead><tbody><tr><td align="center">$\mu_1-\mu_2$两个总体均值之差</td><td align="center">$\bar{x_1}-\bar{x_2}$</td><td align="center">$\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">$(\bar{x_1}-\bar{x_2})\pm z_{\alpha /2}\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">(1)独立大样本($n_1\ge 30,n_2\ge 30$)<br>(2)$\sigma_1,\sigma_2$已知</td></tr><tr><td align="center">$\mu_1-\mu_2$两个总体均值之差</td><td align="center">$\bar{x_1}-\bar{x_2}$</td><td align="center">$\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">$(\bar{x_1}-\bar{x_2})\pm z_{\alpha /2}\sqrt{\frac{s_1^2}{n_1}+\frac{s_2^2}{n_2}}$</td><td align="left">(1)独立大样本($n_1\ge 30,n_2\ge 30$)<br>(2)$\sigma_1,\sigma_2$未知</td></tr><tr><td align="center">$\mu_1-\mu_2$两个总体均值之差</td><td align="center">$\bar{x_1}-\bar{x_2}$</td><td align="center">$\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">$(\bar{x_1}-\bar{x_2})\pm t_{\alpha /2}(n_1+n_2-2)\sqrt{s_p^2(\frac{1}{n_1}+\frac{1}{n_2})}$</td><td align="left">(1)两个正态整体<br>(2)独立小样本($n_1&lt;30,n_2&lt;30$)<br>(3)$\sigma_1,\sigma_2$未知但相等</td></tr><tr><td align="center">$\mu_1-\mu_2$两个总体均值之差</td><td align="center">$\bar{x_1}-\bar{x_2}$</td><td align="center">$\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">$(\bar{x_1}-\bar{x_2})\pm t_{\alpha /2}(v)\sqrt{\frac{\sigma_1^2}{n_1}+\frac{\sigma_2^2}{n_2}}$</td><td align="left">(1)两个正态整体<br>(2)独立小样本($n_1&lt;30,n_2&lt;30$)<br>(3)$\sigma_1,\sigma_2$未知且不相等</td></tr><tr><td align="center">$\mu_d=\mu_1-\mu_2$两个总体均值之差</td><td align="center">$\bar{d}$</td><td align="center">$\frac{\sigma_d}{\sqrt n}$</td><td align="left">$\bar{d}\pm z_{\alpha /2}\frac{\sigma_d}{\sqrt n}$</td><td align="left">匹配大样本（$n_1\ge 30,n_2\ge 30$）</td></tr><tr><td align="center">$\pi_1-\pi_2$两个总体比例之差</td><td align="center">$p_1-p_2$</td><td align="center">$\sqrt{\frac{\pi_1(1-\pi_1)}{n_1}+\frac{\pi_2(1-\pi_2)}{n_2}}$</td><td align="left">$(p_1-p_2)\pm z_{\alpha /2}\sqrt{\frac{p_1(1-p_1)}{n_1}+\frac{p_2(1-p_2)}{n_2}}$</td><td align="left">(1)两个二项总体<br>(2)大样本($n_1 p_1\ge 5,n1(1-p_1)\ge 5,n_2 p_2\ge 5,n_2(1-p_2)\ge 5$)</td></tr><tr><td align="center">$\sigma_1^2/\sigma_2^2$两个总体方差比</td><td align="center">$s_1^2/s_2^2$</td><td align="center">(不要求)</td><td align="left">$\frac{s_1^2/s_2^2}{F_{\alpha/2}}\le\frac{\sigma_1^2}{\sigma_2^2}\le\frac{s_1^2/s_2^2}{F_{1-\alpha/2}$</td><td align="left">两个正态总体</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;估计总体均值时样本量的确定&quot;&gt;&lt;a href=&quot;#估计总体均值时样本量的确定&quot; class=&quot;headerlink&quot; title=&quot;估计总体均值时样本量的确定&quot;&gt;&lt;/a&gt;估计总体均值时样本量的确定&lt;/h3&gt;&lt;p&gt;总体均值的置信区间是由样本均值$\bar x$和估计
      
    
    </summary>
    
      <category term="统计学" scheme="https://sukioosuke.github.io/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
      <category term="统计学" scheme="https://sukioosuke.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="样本" scheme="https://sukioosuke.github.io/tags/%E6%A0%B7%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>numpy的简单使用和入门</title>
    <link href="https://sukioosuke.github.io/2019/07/22/python-numpy/"/>
    <id>https://sukioosuke.github.io/2019/07/22/python-numpy/</id>
    <published>2019-07-22T07:16:11.000Z</published>
    <updated>2019-07-25T06:32:39.577Z</updated>
    
    <content type="html"><![CDATA[<h3 id="numpy中数组的建立"><a href="#numpy中数组的建立" class="headerlink" title="numpy中数组的建立"></a>numpy中数组的建立</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = np.array([<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">4</span>], dtype=np.int32)</span><br></pre></td></tr></table></figure><p>在建立数组时，dtype可以选择int、int32、float、float32等</p><p>numpy还可以创建矩阵，同样也是通过array来创建的。同时在创建时可以创建全0、全1、全空数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">matrix = np.array([[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>],[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line">print(matrix)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[ 1 3 5]</span></span><br><span class="line"><span class="string"> [ 2 4 6]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">matrix = np.zeros((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.],</span></span><br><span class="line"><span class="string">       [ 0.,  0.,  0.,  0.]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">matrix = np.ones((<span class="number">3</span>,<span class="number">4</span>),dtype = np.int)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[1, 1, 1, 1],</span></span><br><span class="line"><span class="string">       [1, 1, 1, 1],</span></span><br><span class="line"><span class="string">       [1, 1, 1, 1]])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">a = np.empty((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[  0.00000000e+000,   4.94065646e-324,   9.88131292e-324,</span></span><br><span class="line"><span class="string">          1.48219694e-323],</span></span><br><span class="line"><span class="string">       [  1.97626258e-323,   2.47032823e-323,   2.96439388e-323,</span></span><br><span class="line"><span class="string">          3.45845952e-323],</span></span><br><span class="line"><span class="string">       [  3.95252517e-323,   4.44659081e-323,   4.94065646e-323,</span></span><br><span class="line"><span class="string">          5.43472210e-323]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>在构建全空数组时，可以看到数组元素均为接近于0的极小数。</p><p>可以通过arrange、linspace和random可以创建连续数组、线段型数组和随机数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">array = np.arange(<span class="number">10</span>,<span class="number">20</span>,<span class="number">2</span>) <span class="comment"># 10-19 的数据，2步长</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([10, 12, 14, 16, 18])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">array = np.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">20</span>)    <span class="comment"># 开始端1，结束端10，且分割成20个数据，生成线段</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([  1.        ,   1.47368421,   1.94736842,   2.42105263,</span></span><br><span class="line"><span class="string">         2.89473684,   3.36842105,   3.84210526,   4.31578947,</span></span><br><span class="line"><span class="string">         4.78947368,   5.26315789,   5.73684211,   6.21052632,</span></span><br><span class="line"><span class="string">         6.68421053,   7.15789474,   7.63157895,   8.10526316,</span></span><br><span class="line"><span class="string">         8.57894737,   9.05263158,   9.52631579,  10.        ])</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">array = np.random.random((<span class="number">2</span>,<span class="number">4</span>))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0.94692159,  0.20821798,  0.35339414,  0.2805278 ],</span></span><br><span class="line"><span class="string">      [ 0.04836775,  0.04023552,  0.44091941,  0.21665268]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>通过reshape可以改变矩阵的行列数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">12</span>).reshape((<span class="number">3</span>,<span class="number">4</span>))    <span class="comment"># 3行4列，0到11</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">array([[ 0,  1,  2,  3],</span></span><br><span class="line"><span class="string">       [ 4,  5,  6,  7],</span></span><br><span class="line"><span class="string">       [ 8,  9, 10, 11]])</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h3 id="矩阵中的运算"><a href="#矩阵中的运算" class="headerlink" title="矩阵中的运算"></a>矩阵中的运算</h3><p>numpy构建出的矩阵可以直接使用通用运算符计算加减乘除等，需要注意的是：</p><blockquote><ul><li>矩阵元素平方使用的是**来表示</li><li>矩阵乘法a×b为np.dot(a, b)，或者a.dot(b)</li><li>矩阵平均值和中位数的函数为mean()和median()</li><li>矩阵累加值可以使用cumsum()来计算</li><li>矩阵累差值可以使用diff()来计算</li><li>nonezero()函数：将所有非零元素的行与列坐标分割开，重构成两个分别关于行和列的矩阵。</li><li>sort()函数可以对矩阵中每行元排序</li><li>矩阵的转置可以使用transpose()或者T函数实现，在转置时，应注意单纯的array是无法转置的（如：[1,1,1]），需将其行向量才能转置</li><li>flatten()函数可以实现矩阵的扁平化</li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A = np.array([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(A.T)</span><br><span class="line"><span class="string">"[1,1,1]"</span></span><br><span class="line"></span><br><span class="line">print(A[np.newaxis,:])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1 1 1]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">print(A[:,np.newaxis])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[[1]</span></span><br><span class="line"><span class="string">[1]</span></span><br><span class="line"><span class="string">[1]]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p>numpy可以对索引进行一系列的运算<br>argmin()、argmax()分别对应着求矩阵中最小元素和最大元素的索引。<br>在Python的 list 中，我们可以利用:对一定范围内的元素进行切片操作，在Numpy中我们依然可以使用类似的方法。如：A[1, 1:3]</p><p>clip(Array,Array_min,Array_max)函数可以使矩阵转换为在[min, max]范围内的矩阵，若矩阵中有大于max或小于min的元素值，则对应转换为max或min。</p><h3 id="矩阵的合并与分割"><a href="#矩阵的合并与分割" class="headerlink" title="矩阵的合并与分割"></a>矩阵的合并与分割</h3><p>合并：横向合并np.vstack(),纵向合并np.hstack()<br>np.concatenate()支持多个矩阵的合并，并且可以使用axis参数指定合并的维度</p><p>分割：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;numpy中数组的建立&quot;&gt;&lt;a href=&quot;#numpy中数组的建立&quot; class=&quot;headerlink&quot; title=&quot;numpy中数组的建立&quot;&gt;&lt;/a&gt;numpy中数组的建立&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab
      
    
    </summary>
    
      <category term="python" scheme="https://sukioosuke.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://sukioosuke.github.io/tags/python/"/>
    
      <category term="机器学习" scheme="https://sukioosuke.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="numpy" scheme="https://sukioosuke.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>模型泛化能力</title>
    <link href="https://sukioosuke.github.io/2019/07/20/statistics-generalization-abaility/"/>
    <id>https://sukioosuke.github.io/2019/07/20/statistics-generalization-abaility/</id>
    <published>2019-07-20T10:48:17.000Z</published>
    <updated>2019-07-22T07:15:50.523Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="统计学" scheme="https://sukioosuke.github.io/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
      <category term="统计学" scheme="https://sukioosuke.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="模型" scheme="https://sukioosuke.github.io/tags/%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>模型选择</title>
    <link href="https://sukioosuke.github.io/2019/07/19/statistics-model-choose/"/>
    <id>https://sukioosuke.github.io/2019/07/19/statistics-model-choose/</id>
    <published>2019-07-18T16:04:24.000Z</published>
    <updated>2019-07-22T07:15:50.527Z</updated>
    
    <content type="html"><![CDATA[<p>模型选择有两种常用方法：<strong>正则化和交叉验证</strong></p><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><p>正则化是结构风险最小化策略的实现。在经验风险上加一个正则项或者罚项，一般是模型复杂度的单调递增函数，模型越复杂，则正则化项的值就越大。<br>正则化一般具有如下形式：<br>$$ \min_{f\in\mathcal{F}} \frac{1}{N}\sum_{i=1}^{N}L(y_i,f(x_i))+\lambda J(f) $$<br>其中，第1项是经验风险，第2项是正则化项。$\lambda \ge 0$为调节两者比重的系数。</p><p>正则化符合奥卡姆剃刀原理，在所有可选择的模型中，能够很好的解释已知数据并且简单的才是最好的模型。</p><h4 id="例1-L2正则化项"><a href="#例1-L2正则化项" class="headerlink" title="例1,L2正则化项"></a>例1,L2正则化项</h4><p>回归问题中，损失函数是平方损失，正则化项可以是参数向量的$L_2$范数<br>$$ L(w)=\frac{1}{N}\sum_{i=1}^N(f(x_i;w)-y_i)^2+\frac{\lambda}{2}{\lVert w\rVert}^2 $$<br>这里$\lVert w \rVert$表示参数向量w的$L_2$范数，即<br>$$ {\lVert x \rVert}<em>{2}=\sqrt{\sum</em>{i=1}^{N}{x_i^2}} $$<br>当回归模型中的多项式项数很多时，$L_2$范数的值会收到$w_i$的影响，其中i越小，其对应的权重越重要，即经过正则化学习，高次项前的系数会变得很小，最后的曲线类似一条直线，这就是让模型变成了一个简单的模型。（具体推导可详见*[6]一文搞懂深度学习正则化的L2范数*）</p><blockquote><ul><li>正则化让模型根据训练数据中常见的模式来学习相对简单的模型，无正则化的模型用大参数学习大噪声。</li><li>L2正则化通过权重衰减，保证了模型的简单，提高了泛化能力。</li></ul></blockquote><h4 id="例2，L0、L1正则化项"><a href="#例2，L0、L1正则化项" class="headerlink" title="例2，L0、L1正则化项"></a>例2，L0、L1正则化项</h4><p>当使用L0、L1正则化项时，对模型的影响是让模型的影响因子变得稀疏，进行特征自动选择。</p><h5 id="L0正则化"><a href="#L0正则化" class="headerlink" title="L0正则化"></a>L0正则化</h5><p> L0范数指的是向量中非零元素的个数，L0正则化就是限制非零元素的个数在一定的范围，这很明显会带来稀疏。一般而言，用L0范数实现稀疏是一个NP-hard问题，因此人们一般使用L1正则化来对模型进行稀疏约束。</p><h5 id="L1正则化"><a href="#L1正则化" class="headerlink" title="L1正则化"></a>L1正则化</h5><p>L1范数是计算向量中每个元素绝对值的和,可以看出，L1范数让w向0靠近，从而对于小权重能很快的减小，对大权重减小较慢，从而使模型的权重集中在高重要度的特征上。使得最终权重w变得稀疏。<br>$$ {\lVert x\rVert}<em>1 = \sum</em>{i=1}^N |x_i| $$</p><h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><p>另一种常用的模型选择方法是交叉验证。<br>在数据集充沛的前提下，将数据集简单的分为三部分，分别为训练集、验证集和测试集。训练集用来训练模型，验证集用于模型的选择，而测试集用于最终对学习方法的评估。但往往在实际应用中数据并不充足，为了选择好的模型，反复的使用数据，把给定的数据进行切分，将切分的数据集组合为训练集和测试集，在此基础上反复进行训练测试以及模型选择，这就是交叉验证。</p><h4 id="简单交叉验证"><a href="#简单交叉验证" class="headerlink" title="简单交叉验证"></a>简单交叉验证</h4><ol><li>随机的将已给数据分成两部分，一部分作为训练集，一部分作为测试集</li><li>用训练集在各种条件下（如不同的参数个数等）训练模型，从而得到不同的模型</li><li>在测试集上评价各个模型的测试误差，选取测试误差最小的模型</li></ol><h4 id="S折交叉验证"><a href="#S折交叉验证" class="headerlink" title="S折交叉验证"></a>S折交叉验证</h4><p>S折交叉验证是目前应用最多的方法。</p><ol><li>随机将已给数据切分为S个互不相交的大小相同的子集</li><li>利用S-1个子集的数据训练模型，利用余下的子集测试模型</li><li>对该过程可能的S种选择重复进行，最后选出S次评价中平均测试误差最小的模型</li></ol><h4 id="留一交叉验证"><a href="#留一交叉验证" class="headerlink" title="留一交叉验证"></a>留一交叉验证</h4><p>留一交叉验证是S折交叉验证的特殊情况，这里S=N，N是给定数据集的数据个数。</p><p>参考文献：<br>[1] 从高斯消元法到矩阵乘法 <a href="https://www.matongxue.com/madocs/755.html" target="_blank" rel="noopener">https://www.matongxue.com/madocs/755.html</a><br>[2] 如何理解矩阵乘法？ <a href="https://www.matongxue.com/madocs/555.html" target="_blank" rel="noopener">https://www.matongxue.com/madocs/555.html</a><br>[3] 如何理解相似矩阵？ <a href="https://www.matongxue.com/madocs/491.html" target="_blank" rel="noopener">https://www.matongxue.com/madocs/491.html</a><br>[4] 如何理解矩阵特征值？ <a href="https://www.zhihu.com/question/21874816" target="_blank" rel="noopener">https://www.zhihu.com/question/21874816</a><br>[5] L0、L1、L2范数在机器学习中的应用 <a href="https://www.jianshu.com/p/4bad38fe07e6" target="_blank" rel="noopener">https://www.jianshu.com/p/4bad38fe07e6</a><br>[6] 一文搞懂深度学习正则化的L2范数 <a href="https://blog.csdn.net/u010725283/article/details/79212762" target="_blank" rel="noopener">https://blog.csdn.net/u010725283/article/details/79212762</a><br>[7] 阵与伴随矩阵的关系 <a href="https://wenku.baidu.com/view/85d3506f77c66137ee06eff9aef8941ea76e4bd1.html" target="_blank" rel="noopener">https://wenku.baidu.com/view/85d3506f77c66137ee06eff9aef8941ea76e4bd1.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;模型选择有两种常用方法：&lt;strong&gt;正则化和交叉验证&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;正则化&quot;&gt;&lt;a href=&quot;#正则化&quot; class=&quot;headerlink&quot; title=&quot;正则化&quot;&gt;&lt;/a&gt;正则化&lt;/h3&gt;&lt;p&gt;正则化是结构风险最小化策略的实现。在经验风
      
    
    </summary>
    
      <category term="统计学" scheme="https://sukioosuke.github.io/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
      <category term="统计学" scheme="https://sukioosuke.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="模型" scheme="https://sukioosuke.github.io/tags/%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="模型选择" scheme="https://sukioosuke.github.io/tags/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>oj-cpp-bits</title>
    <link href="https://sukioosuke.github.io/2019/07/08/oj-cpp-bits/"/>
    <id>https://sukioosuke.github.io/2019/07/08/oj-cpp-bits/</id>
    <published>2019-07-08T03:20:54.000Z</published>
    <updated>2019-07-08T03:33:38.888Z</updated>
    
    <content type="html"><![CDATA[<p>在OJ中经常能看到C++使用头文件&lt;bits/stdc++.h&gt;，但是在本地使用简易编译器时，经常会报找不到该文件。这个文件是属于MinGW中的一个，如果安装了MinGW的直接在文件夹里面找到bits这个文件夹（注意里面一定要包含stdc++.h，有可能有两个bits文件夹），把里面内容复制粘贴到vs的头文件库（一般是在安装目录）里面。<br>如果没有安装MinGW，在自己vs的includ目录里新建一个bits文件夹，里面新建一个名叫stdc++.h的头文件（ubuntu一般是在user/include下面），里面写你常用的头文件，这里我搬运一下stdc++.h源文件：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ includes used for precompiling -*- C++ -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Copyright (C) 2003-2015 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This file is part of the GNU ISO C++ Library.  This library is free</span></span><br><span class="line"><span class="comment">// software; you can redistribute it and/or modify it under the</span></span><br><span class="line"><span class="comment">// terms of the GNU General Public License as published by the</span></span><br><span class="line"><span class="comment">// Free Software Foundation; either version 3, or (at your option)</span></span><br><span class="line"><span class="comment">// any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Under Section 7 of GPL version 3, you are granted additional</span></span><br><span class="line"><span class="comment">// permissions described in the GCC Runtime Library Exception, version</span></span><br><span class="line"><span class="comment">// 3.1, as published by the Free Software Foundation.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License and</span></span><br><span class="line"><span class="comment">// a copy of the GCC Runtime Library Exception along with this program;</span></span><br><span class="line"><span class="comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span></span><br><span class="line"><span class="comment">// &lt;http://www.gnu.org/licenses/&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** @file stdc++.h</span></span><br><span class="line"><span class="comment"> *  This is an implementation file for a precompiled header.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.4.1.2 Headers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在OJ中经常能看到C++使用头文件&amp;lt;bits/stdc++.h&amp;gt;，但是在本地使用简易编译器时，经常会报找不到该文件。这个文件是属于MinGW中的一个，如果安装了MinGW的直接在文件夹里面找到bits这个文件夹（注意里面一定要包含stdc++.h，有可能有两个b
      
    
    </summary>
    
      <category term="OJ" scheme="https://sukioosuke.github.io/categories/OJ/"/>
    
    
      <category term="C++" scheme="https://sukioosuke.github.io/tags/C/"/>
    
      <category term="OJ" scheme="https://sukioosuke.github.io/tags/OJ/"/>
    
  </entry>
  
  <entry>
    <title>统计学概论</title>
    <link href="https://sukioosuke.github.io/2019/07/04/statistics-introduction/"/>
    <id>https://sukioosuke.github.io/2019/07/04/statistics-introduction/</id>
    <published>2019-07-04T13:56:25.000Z</published>
    <updated>2019-07-22T07:15:50.527Z</updated>
    
    <content type="html"><![CDATA[<p><strong>统计学习是关于计算机基于数据构建概率统计模型并用模型对数据进行预测与分析的一门学科。</strong>统计学习方法是由模型、策略和算法构成的。</p><p>$$ 方法 = 模型 + 策略 + 算法 $$</p><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><h4 id="1-非概率模型"><a href="#1-非概率模型" class="headerlink" title="1.非概率模型"></a>1.非概率模型</h4><p>在非概率模型中，假设空间F是由一个参数向量决定的函数族。X、Y分别代表输入空间和输出空间，θ为参数空间。<br>$$ \mathcal{F}={f|Y=f_\theta(X),\theta\in\mathrm{R}^n} $$</p><h4 id="2-概率模型"><a href="#2-概率模型" class="headerlink" title="2.概率模型"></a>2.概率模型</h4><p>在概率模型中，假设空间F是由一个参数向量决定的条件概率分布族。X、Y分别代表输入空间和输出空间，θ为参数空间。<br>$$ \mathcal{F}={P|P_\theta(Y|X),\theta\in\mathrm{R}^n} $$</p><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><h4 id="1-损失函数和风险函数"><a href="#1-损失函数和风险函数" class="headerlink" title="1.损失函数和风险函数"></a>1.损失函数和风险函数</h4><p>常用的损失函数（代价函数）有以下几种：</p><blockquote><ul><li>0-1损失函数（0-1 loss function）<br>$$ L(Y,f(X))=<br>\begin{cases}<br>1, Y\not=f(X) \<br>0, Y=f(X) \<br>\end{cases}<br>$$</li><li>平方损失函数（quadratic loss function）<br>$$ L(Y,f(X))=(Y-f(X))^2 $$</li><li>绝对损失函数（absolute loss function）<br>$$ L(Y,f(X))=|Y-f(X)| $$</li><li>对数损失函数（logarithmic loss function）（对数似然损失函数）<br>$$ L(Y,P(Y|X))=-logP(Y|X) $$ </li></ul></blockquote><p>损失函数的期望即风险函数，模型f(X)关于联合分布P(X,Y)的平均意义下的损失。<br>$$ R_{exp}(f)=E_P[L(Y,f(X))]=\int_{\mathcal{X}\times\mathcal{Y}}L(y,f(x))P(x,y)dxdy $$<br>学习的目标就是选择期望风险最小的模型，但P(X,Y)是未知的，故$R_{exp}(f)$不能直接计算。从而对训练数据集计算经验损失$R_{emp}(f)$:<br>$$ R_{emp}(f)=\frac{1}{N}\sum_{i=1}^{N}L(y_i,f(x_i)) $$<br>在N趋于无穷是，$R_{emp}(f)$趋近于$R_{exp}(f)$。但是实验中训练样本数有限，所以要对经验风险进行一定的矫正，在矫正总有两个基本策略：①经验风险最小化和②结构风险最小化。</p><h4 id="2-经验风险最小化和结构风险最小化"><a href="#2-经验风险最小化和结构风险最小化" class="headerlink" title="2.经验风险最小化和结构风险最小化"></a>2.经验风险最小化和结构风险最小化</h4><h5 id="1-经验风险最小化（ERM）"><a href="#1-经验风险最小化（ERM）" class="headerlink" title="1)经验风险最小化（ERM）"></a>1)经验风险最小化（ERM）</h5><p>经验风险最小化的策略认为，经验风险最小的模型就是最优的模型。根据这一策略，可转化为求解最优化问题：<br>$$ \min_{f\in\mathcal{F}} \frac{1}{N}\sum_{i=1}^{N}L(y_i,f(x_i)) $$<br>但是当样本容量很小时，经验风险最小化学习就可能会出现过拟合现象。</p><h5 id="2-结构风险最小化（SRM）"><a href="#2-结构风险最小化（SRM）" class="headerlink" title="2)结构风险最小化（SRM）"></a>2)结构风险最小化（SRM）</h5><p>结构风险最小化等价于正则化，有效的防止了过拟合。结构风险在经验风险上加上表示模型复杂度的正则化项或者罚项。结构风险的定义为：<br>$$ R_{srm}(f)=\frac{1}{N}\sum_{i=1}^{N}L(y_i,f(x_i))+\lambda J(f) $$<br>J(f)表示模型的复杂度，$/lamda$是系数，用于权衡经验风险和模型复杂度。即求最优模型，就是求解最优化问题$\min_{f\in\mathcal{F}} R_{srm}F$</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>算法是指学习模型的具体计算方法。统计学习的问题是最优化问题，统计学习算法也就是求解最优化问题的算法。要找到全局最优解，并且求解过程要高效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;统计学习是关于计算机基于数据构建概率统计模型并用模型对数据进行预测与分析的一门学科。&lt;/strong&gt;统计学习方法是由模型、策略和算法构成的。&lt;/p&gt;
&lt;p&gt;$$ 方法 = 模型 + 策略 + 算法 $$&lt;/p&gt;
&lt;h3 id=&quot;模型&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="统计学" scheme="https://sukioosuke.github.io/categories/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
      <category term="统计学" scheme="https://sukioosuke.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
      <category term="损失函数" scheme="https://sukioosuke.github.io/tags/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    
      <category term="代价函数" scheme="https://sukioosuke.github.io/tags/%E4%BB%A3%E4%BB%B7%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>python中的yield关键字</title>
    <link href="https://sukioosuke.github.io/2019/07/02/python-yield/"/>
    <id>https://sukioosuke.github.io/2019/07/02/python-yield/</id>
    <published>2019-07-02T08:47:06.000Z</published>
    <updated>2019-07-18T10:48:48.208Z</updated>
    
    <content type="html"><![CDATA[<p>今天在看别人的代码时遇到了yield关键字，当时学python的时候学的并不扎实，现在做个总结</p><h3 id="yield-example"><a href="#yield-example" class="headerlink" title="yield example"></a>yield example</h3><p>一个网上经常列举的yield的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">node</span>.<span class="title">_get_child_candidates</span><span class="params">(self, distance, min_dist, max_dist)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._leftchild <span class="keyword">and</span> distance - max_dist &lt; self._median:</span><br><span class="line">        <span class="keyword">yield</span> self._leftchild</span><br><span class="line">    <span class="keyword">if</span> self._rightchild <span class="keyword">and</span> distance + max_dist &gt;= self._median:</span><br><span class="line">        <span class="keyword">yield</span> self._rightchild</span><br></pre></td></tr></table></figure><p>下面是具体调用时的执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result, candidates = list(), [self]</span><br><span class="line"><span class="keyword">while</span> candidates:</span><br><span class="line">    node = candidates.pop()</span><br><span class="line">    distance = node._get_dist(obj)</span><br><span class="line">    <span class="keyword">if</span> distance &lt;= max_dist <span class="keyword">and</span> distance &gt;= min_dist:</span><br><span class="line">        result.extend(node._values)</span><br><span class="line">    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>调用_get_child_candidates时，返回了一个child的合集（list），yield是如何生成这个对象的呢？</p><h3 id="先来看一下可迭代对象"><a href="#先来看一下可迭代对象" class="headerlink" title="先来看一下可迭代对象"></a>先来看一下可迭代对象</h3><p>当你建立了一个列表，你可以逐项地读取这个列表，这叫做一个可迭代对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> mylist :</span><br><span class="line"><span class="meta">... </span>   print(i)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>mylist</code>是一个可迭代的对象。当你使用一个列表生成式来建立一个列表的时候，同样生成了一个可迭代的对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mylist = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> mylist :</span><br><span class="line"><span class="meta">... </span>   print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>可以通过<code>for</code>循环读取的对象就是一个迭代器，其元素在遍历访问时均存储在了内存中，如果要大量访问数据的话，迭代器的方式是很占用资源的</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>生成器是可以迭代的对象，但是你<strong>只需读取一次</strong>，它可以在调用时实时生成数据，而不是将数据都存放在内存中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mygenerator = (x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator :</span><br><span class="line"><span class="meta">... </span>   print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>虽然只是把(换成了[，但是对于生成器而言，只能迭代一次，而且也从迭代器变成了生成器。</p><h3 id="回到yield关键字"><a href="#回到yield关键字" class="headerlink" title="回到yield关键字"></a>回到yield关键字</h3><p><code>yield</code>关键字在调用后会返回一个类似于<code>mygenerator</code>的生成器，类似于返回生成器的<code>return</code>关键字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">createGenerator</span><span class="params">()</span> :</span></span><br><span class="line"><span class="meta">... </span>   mylist = range(<span class="number">3</span>)</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">for</span> i <span class="keyword">in</span> mylist :</span><br><span class="line"><span class="meta">... </span>       <span class="keyword">yield</span> i*i</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mygenerator = createGenerator() <span class="comment"># create a generator</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(mygenerator) <span class="comment"># mygenerator is an object!</span></span><br><span class="line">&lt;generator object createGenerator at <span class="number">0xb7555c34</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> mygenerator:</span><br><span class="line"><span class="meta">... </span>    print(i)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>在执行<code>for i in mygenerator</code>时，到达<code>yield</code>关键字时，返回<code>yield</code>后的值作为第一次迭代的返回值. 然后，每次执行这个函数都会继续返回定义的迭代值，直到没有可以返回的。带有yield的函数不仅仅只用于for循环中，而且可用于某个函数的参数，只要这个函数的参数允许迭代参数。比如<code>array.extend</code>函数，它的原型是<code>array.extend(iterable)</code>。此处应注意的是，生成器的方法虽然可以调用多次，获取多个迭代结果，但生成器只会实例化一次，既实例化后的生成器可以通过变量等来控制生成器的生成与穷尽。可参考如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="class"><span class="keyword">class</span> <span class="title">Bank</span><span class="params">()</span>:</span> <span class="comment"># let's create a bank, building ATMs</span></span><br><span class="line"><span class="meta">... </span>   crisis = <span class="literal">False</span></span><br><span class="line"><span class="meta">... </span>   <span class="function"><span class="keyword">def</span> <span class="title">create_atm</span><span class="params">(self)</span> :</span></span><br><span class="line"><span class="meta">... </span>       <span class="keyword">while</span> <span class="keyword">not</span> self.crisis :</span><br><span class="line"><span class="meta">... </span>           <span class="keyword">yield</span> <span class="string">"$100"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hsbc = Bank() <span class="comment"># when everything's ok the ATM gives you as much as you want</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>corner_street_atm = hsbc.create_atm()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(corner_street_atm.__next__()())</span><br><span class="line">$<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(corner_street_atm.__next__()())</span><br><span class="line">$<span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print([corner_street_atm.__next__()() <span class="keyword">for</span> cash <span class="keyword">in</span> range(<span class="number">5</span>)])</span><br><span class="line">[<span class="string">'$100'</span>, <span class="string">'$100'</span>, <span class="string">'$100'</span>, <span class="string">'$100'</span>, <span class="string">'$100'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hsbc.crisis = <span class="literal">True</span> <span class="comment"># crisis is coming, no more money!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(corner_street_atm.__next__()())</span><br><span class="line">&lt;type <span class="string">'exceptions.StopIteration'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wall_street_atm = hsbc.create_atm() <span class="comment"># it's even true for new ATMs</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(wall_street_atm.__next__()())</span><br><span class="line">&lt;type <span class="string">'exceptions.StopIteration'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hsbc.crisis = <span class="literal">False</span> <span class="comment"># trouble is, even post-crisis the ATM remains empty</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(corner_street_atm.__next__()())</span><br><span class="line">&lt;type <span class="string">'exceptions.StopIteration'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>brand_new_atm = hsbc.create_atm() <span class="comment"># build a new one to get back in business</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> cash <span class="keyword">in</span> brand_new_atm :</span><br><span class="line"><span class="meta">... </span>   <span class="keyword">print</span> cash</span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">$<span class="number">100</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="迭代器的操作"><a href="#迭代器的操作" class="headerlink" title="迭代器的操作"></a>迭代器的操作</h3><p>生成器只能实例化一次，这就为我们的复用造成一些麻烦，如果需要两个一模一样但是相互独立的生成器怎么办呢？<br>itertools提供了很多特殊的迭代方法，包括复制一个迭代器，串联迭代器，把嵌套的列表分组等等等，这个类从一定程度上解决了生成器的复用问题。<br>如果想要动态变化生成器的内容呢？生成器本身除去next方法外，还有一个send(msg)的方法，send(msg)与next()的区别在于send可以传递参数给yield表达式，这时传递的参数会作为yield表达式的值，而yield的参数是返回给调用者的值。比如函数中有一个yield赋值，<code>a = yield 5</code>，第一次迭代到这里会返回5，a还没有赋值。第二次迭代时，使用<code>.send(10)</code>，那么，就是强行修改yield 5表达式的值为10，本来是5的，而现在<code>a=10</code>。可以认为，next()等同于send(None)。</p><blockquote><p>此处应注意的是，第一次调用时必须先next()或send(None)，否则会报错，因为这时候没有上一个yield值。</p></blockquote><h3 id="关于迭代器的内部原理"><a href="#关于迭代器的内部原理" class="headerlink" title="关于迭代器的内部原理"></a>关于迭代器的内部原理</h3><p>迭代是一个实现可迭代对象(实现的是<code>__iter__()</code>方法)和迭代器(实现的是<code>__next__()</code>方法)的过程。可迭代对象是你可以从其获取到一个迭代器的任一对象。迭代器是那些允许你迭代可迭代对象的对象。</p><p>参考文献：<a href="https://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html#yield" target="_blank" rel="noopener">https://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html#yield</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在看别人的代码时遇到了yield关键字，当时学python的时候学的并不扎实，现在做个总结&lt;/p&gt;
&lt;h3 id=&quot;yield-example&quot;&gt;&lt;a href=&quot;#yield-example&quot; class=&quot;headerlink&quot; title=&quot;yield examp
      
    
    </summary>
    
      <category term="python" scheme="https://sukioosuke.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://sukioosuke.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World!</title>
    <link href="https://sukioosuke.github.io/2019/06/25/Hello-World/"/>
    <id>https://sukioosuke.github.io/2019/06/25/Hello-World/</id>
    <published>2019-06-25T09:39:24.000Z</published>
    <updated>2019-07-18T10:48:48.208Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直想找个工具记录一下自己的所学所想，开始在csdn做简单的记录，后来改版后每次写的时候都要花费不少功夫要写，就慢慢放弃了。这次在git用hexo自建blog，可以避免这个问题，也可以让自己坚持下去。<br>blog主要用于：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>整理技术文稿（代码）</li></ul></blockquote><p>别人的赏识都是过眼云烟，只有自己的提高进步才是真金白银！</p><p>p.s. <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">在线md编写工具</a><br>     <a href="http://www.mohu.org/info/symbols/symbols.htm、https://www.e-learn.cn/content/qita/1391472" target="_blank" rel="noopener">LaTex符号</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直想找个工具记录一下自己的所学所想，开始在csdn做简单的记录，后来改版后每次写的时候都要花费不少功夫要写，就慢慢放弃了。这次在git用hexo自建blog，可以避免这个问题，也可以让自己坚持下去。&lt;br&gt;blog主要用于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="随笔" scheme="https://sukioosuke.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="https://sukioosuke.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
